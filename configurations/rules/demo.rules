import org.openhab.core.library.types.*
import org.openhab.core.persistence.*
import org.openhab.model.script.actions.*
import java.io.File
import java.lang.*
import java.io.*
import java.util.*


var Number counter = 1
//var Timer timer = null
var BufferedReader f = null
var String s = null
var String pir_count = "0"
var String pir_count_prev = "0"


rule "PIR Trigger Cron"
	when 
		Time cron "0/5 * * * * ?"
	then
		counter = counter + 1
        
        println("Current PIR trigger count: " + pir_count_prev)
        //say(counter)
        try {
            f = new BufferedReader(new FileReader("pir_count.txt"))
        } catch (FileNotFoundException ex) {
            println("Error: Unable to open file")
        }
        try {
            s = f.readLine()
            pir_count = s
            if(pir_count_prev != pir_count) {
                if(Status.state == ON) {
                	executeCommandLine("python mp3player.py -i 1")
                } else {
                    sendCommand(Camera_Switch, ON)
                	executeCommandLine("python make_call.py")
                }
                pir_count_prev = pir_count
                println("Current PIR trigger count: " + s)
            }

        } catch (IOException t) {
            println("File IO exception")
        }
        f.close()
    end	

rule "Temperature Humidity Update Cron"
when 
    Time cron "0 0/1 * * * ?"
then
    executeCommandLine("sudo python openhab_dht11.py")
    var BufferedReader dht11_file = new BufferedReader(new FileReader("temperature.txt"))
    var String temp = dht11_file.readLine()
    postUpdate(Temperature, temp)
    dht11_file.close()
	
    var Number temp_int = Temperature.state as DecimalType


    if(temp_int.intValue > 50) {
        executeCommandLine("python fire_call.py")
    }

    dht11_file = new BufferedReader(new FileReader("humidity.txt"))
    postUpdate(Humidity, dht11_file.readLine())
    dht11_file.close()
    
end

rule Startup
when 
	System started
then
	println("Welcome at openHab!")
end

rule Goodbye
when 
	System shuts down
then
	println("Good bye!")
end

rule "Light_Living_Room update"
    when 
        Item Light_Living_Room received command
    then
    	//say(f.lastModified())
        if(receivedCommand==ON) {
            //say("Living Room Switch ON")
            executeCommandLine("sudo python openhab_gpio.py  --pin=16 --set=ON --log gpio.log")
        } else {
            executeCommandLine("sudo python openhab_gpio.py  --pin=16 --set=OFF --log gpio.log")
            //say("Living Room Switch OFF")
        }
   	end

rule "Light_Kitchen_Room update"
    when 
        Item Light_Kitchen_Room received command
    then
        if(receivedCommand==ON) {
            executeCommandLine("sudo python openhab_gpio.py  --pin=18 --set=ON --log gpio.log")
            //say("Kitchen Room Switch ON")
        } else {
            executeCommandLine("sudo python openhab_gpio.py  --pin=18 --set=OFF --log gpio.log")
            //say("Kitchen Room Switch OFF")
        }
    end
    

rule "Light_Bed_Room update"
    when 
        Item Light_Bed_Room received command
    then
        if(receivedCommand==ON) {
            executeCommandLine("sudo python openhab_gpio.py  --pin=22 --set=ON --log gpio.log")
            //say("Bedg Room Switch ON")
        } else {
            executeCommandLine("sudo python openhab_gpio.py  --pin=22 --set=OFF --log gpio.log")
            //say("Bedg Room Switch OFF")
        }
	end

rule "Take Snap"
	when 
		Item Camera_Switch received command
	then
        if(receivedCommand==ON) {
            executeCommandLine("raspistill -h 400 -w 400 -o webapps/images/rpi_camera.jpg ")
			sendCommand(Camera_Switch, OFF)
            //say("Bedg Room Switch ON")
        } else {
        }
	end

rule "Webcam Surveillance"
	when
		Item Webcam_Switch received command
	then
		if(receivedCommand==ON) {
			executeCommandLine("python webcam.py --start")

		} else {
			executeCommandLine("python webcam.py --stop")
		}
    end

rule "Select Music Player"
	when
		Item Music_Player received command
	then
        executeCommandLine("python mp3player.py -i " + receivedCommand)
        /*
		switch(receivedCommand) {
			case 0 : playStream(null)
			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
		}*/
end
//rule "Crontest"
//	when 
//		Time cron "0/15 * * * * ?"
//	then
//		//say(counter)
//		counter = counter + 1
//end	

///**
// * This is a demo rule which simulates a real dimmer by reacting to increase/decrease commands 
// * and posting an updated state on the bus 
// */
//rule "Dimmed Light"
//	when
//		Item DimmedLight received command
//	then
//		var Number percent = 0
//		if(DimmedLight.state instanceof DecimalType) percent = DimmedLight.state as DecimalType 
//			
//		if(receivedCommand==INCREASE) percent = percent + 5
//		if(receivedCommand==DECREASE) percent = percent - 5
//
//		if(percent<0)   percent = 0
//		if(percent>100) percent = 100
//		postUpdate(DimmedLight, percent);
//end
//
///**
// * This rule demonstrates how a NumberItem can be used to easily control the local sound system.
// * A selection widget in the UI provides easy access for this
// */
//rule "Select Radio Station"
//	when
//		Item Radio_Station received command
//	then
//		switch(receivedCommand) {
//			case 0 : playStream(null)
//			case 1 : playStream("http://metafiles.gl-systemhaus.de/hr/hr3_2.m3u")
//			case 2 : playStream("http://mp3-live.swr3.de/swr3_m.m3u")
//			case 3 : playStream("http://edge.live.mp3.mdn.newmedia.nacamar.net/radioffh/livestream.mp3.m3u")
//		}
//end
//
///**
// * This rules controls the volume on the local host
// */
//rule "Volume control"
//	when
//		Item Volume received command
//	then
//		if(receivedCommand instanceof PercentType) {
//			setMasterVolume(receivedCommand as PercentType)
//		} else {
//			if(receivedCommand==INCREASE) increaseMasterVolume(20)
//			if(receivedCommand==DECREASE) decreaseMasterVolume(20)	
//		}
//		postUpdate(Volume, masterVolume * 100)
//end
//
////rule "Say temperature on update"
////	when 
////		Item Weather_Temperature received update
////	then
////		//say("The temperature outside is " + Weather_Temperature.state.format("%d") + " degrees celsius")
////end
//
///**
// * The following rules help initializing the demo items with some helpful states.
// */
//rule "Initialize light states"
//	when
//		System started
//	then
//		Lights?.members.forEach(light|
//			postUpdate(light, if(Math::random > 0.7) ON else OFF)
//		)
//end
//
//rule "Initialize heating states"
//	when 
//		System started
//	then
//		Heating?.members.forEach(heating|
//			postUpdate(heating, if(Math::random > 0.8) ON else OFF)
//		)
//		postUpdate(Temperature_Setpoint, 22)
//end
//
//rule "Initialize contact states"
//	when 
//		System started
//	then
//		Windows?.members.forEach(window|
//			postUpdate(window, if(Math::random > 0.5) OPEN else CLOSED)
//		)
//end
//
//rule "Set random room temperatures"
//	when 
//		System started or
//		Time cron "0 0/5 * * * ?"
//	then
//		Temperature?.members.forEach(temperature|
//			postUpdate(temperature, 20.0 + (25.0 - (Math::random * 50.0).intValue) / 10.0)
//		)
//end
//
//rule "Update max and min temperatures"
//when
//	Item Weather_Temperature changed or
//	Time cron "0 0 0 * * ?" or
//	System started
//then	
//	postUpdate(Weather_Temp_Max, Weather_Temperature.maximumSince(now.toDateMidnight).state)
//	postUpdate(Weather_Temp_Min, Weather_Temperature.minimumSince(now.toDateMidnight).state)
//end
//
///** shows how to use sensor values from the past */
//rule "Persistence Demo"
//when
//	Time cron "0 * * * * ?"
//then	
//	if(Weather_Temperature.changedSince(now.minusMinutes(1))) {
//		println("2 minutes ago, the temperature was " + Weather_Temperature.historicState(now.minusMinutes(2)) + " degrees.")		
//	}
//end
//
///** 
// * shows how to check recent switch states - very helpful to avoid executing something too often, just
// * because somebody presses a button too often (e.g. sending a notification, if the doorbell button is pressed)
// */
//rule "Persistence Demo 2"
//when
//	Item DemoSwitch received command
//then
//	if(!DemoSwitch.changedSince(now.minusSeconds(5))) {
//		logInfo("Persistence Demo", "You did not press this button during the last 5 seconds!")
//	}
//end
//
//rule "Timer Demo"
//when
//	Item Light_GF_Corridor_Ceiling received command
//then
//	if(receivedCommand==ON) {
//		if(==null) {
//			// first ON command, so create a timer to turn the light off again
//			timer = createTimer(now.plusSeconds(10)) [|
//				sendCommand(Light_GF_Corridor_Ceiling, OFF)
//			]
//		} else {
//			// subsequent ON command, so reschedule the existing timer
//			timer.reschedule(now.plusSeconds(10))
//		}
//	} else if(receivedCommand==OFF) {
//		// remove any previously scheduled timer
//		if(timer!=null) {
//			timer.cancel
//			timer = null
//		}	
//	}
//end
//
////// Creates an item that stores the last update time of this item
////rule "Records last weather update time"
////when
////  Item Weather_Temperature received update
////then
////  postUpdate(Weather_LastUpdate, new DateTimeType())
////end
